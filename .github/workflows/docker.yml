name: Docker

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: ${{ env.IMAGE_NAME }}:test
          build-args: |
            VERSION=test
            BUILD_TIME=${{ github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm ${{ env.IMAGE_NAME }}:test --help || true

      - name: Run container structure test
        run: |
          # Install container-structure-test
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test

          # Create test config
          cat > container-structure-test.yaml << EOF
          schemaVersion: 2.0.0
          commandTests:
            - name: "check binary exists"
              command: "ls"
              args: ["/tsmetrics"]
              expectedOutput: ["/tsmetrics"]
          fileExistenceTests:
            - name: 'tsmetrics binary'
              path: '/tsmetrics'
              shouldExist: true
              permissions: '-rwxr-xr-x'
          metadataTest:
            exposedPorts: ["9100"]
            user: "65534"
          EOF

          # Run tests
          container-structure-test test --image ${{ env.IMAGE_NAME }}:test --config container-structure-test.yaml

  docker-build-multiarch:
    name: Docker Multi-Arch Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build multi-arch Docker image (test)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ env.IMAGE_NAME }}:multiarch-test
          build-args: |
            VERSION=multiarch-test
            BUILD_TIME=${{ github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
