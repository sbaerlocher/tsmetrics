name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.html

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=3m

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-no-fail -fmt sarif -out results.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build for multiple platforms
        run: |
          # Linux
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=${GITHUB_SHA:0:7} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o bin/tsmetrics-linux-amd64 .
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.version=${GITHUB_SHA:0:7} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o bin/tsmetrics-linux-arm64 .

          # Windows
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.version=${GITHUB_SHA:0:7} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o bin/tsmetrics-windows-amd64.exe .

          # macOS
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.version=${GITHUB_SHA:0:7} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o bin/tsmetrics-darwin-amd64 .
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.version=${GITHUB_SHA:0:7} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o bin/tsmetrics-darwin-arm64 .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: bin/
