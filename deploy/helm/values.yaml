# Default values for tsmetrics.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
---
replicaCount: 1

image:
  repository: ghcr.io/sbaerlocher/tsmetrics
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Tailscale configuration
tailscale:
  # OAuth2 credentials (required)
  oauthClientId: ""
  oauthClientSecret: ""
  tailnetName: ""

  # tsnet configuration
  tsnet:
    enabled: true
    hostname: "tsmetrics"
    tags: "exporter"
    stateDir: "/var/lib/tsmetrics/state"
    # authKey: ""  # Optional: for automatic registration

# Application configuration
config:
  port: 9100
  env: "production"
  logLevel: "info"
  logFormat: "text"
  scrapeTag: "exporter"

  # Performance settings
  clientMetricsTimeout: "10s"
  maxConcurrentScrapes: 10
  scrapeInterval: "30s"
  clientMetricsPort: 5252

  # Target devices configuration
  # Comma-separated list of device names or IPs to target
  # Leave empty to scrape all devices
  targetDevices: ""

# Service configuration
service:
  type: ClusterIP
  port: 9100
  targetPort: 9100
  annotations: {}

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: tsmetrics.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: tsmetrics-tls
  #    hosts:
  #      - tsmetrics.local

# ServiceMonitor for Prometheus Operator
serviceMonitor:
  enabled: false
  interval: 60s
  path: /metrics
  scrapeTimeout: 30s
  labels: {}
  annotations: {}

# External secret management
externalSecret:
  # If enabled, the chart will not create a Secret
  # You need to create a secret named "tsmetrics-secrets" manually
  enabled: false
  # Name of existing secret (default: tsmetrics-secrets)
  secretName: "tsmetrics-secrets"
  # Keys for the secret
  keys:
    oauthClientId: "OAUTH_CLIENT_ID"
    oauthClientSecret: "OAUTH_CLIENT_SECRET"
    tailnetName: "TAILNET_NAME"
    authKey: "TS_AUTHKEY" # optional

# Pod configuration
podAnnotations: {}
podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Resource limits
resources:
  {}
  # limits:
  #   cpu: 500m
  #   memory: 512Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Storage configuration for tsnet state
# Available storage types:
# - pvc: PersistentVolumeClaim (CSI/traditional storage)
# - emptyDir: Temporary storage, persists for pod lifetime
# - hostPath: Direct host filesystem mount (node-local)
# - memory: In-memory tmpfs storage (fastest, non-persistent)
storage:
  # Storage type: pvc, emptyDir, hostPath, memory
  type: "pvc"

  # PVC configuration (when type=pvc)
  pvc:
    enabled: true
    accessMode: ReadWriteOnce
    size: 1Gi
    storageClass: ""
    annotations: {}

  # EmptyDir configuration (when type=emptyDir)
  emptyDir:
    sizeLimit: "1Gi"
    # medium: "" for disk, "Memory" for tmpfs
    medium: ""

  # HostPath configuration (when type=hostPath)
  hostPath:
    path: "/var/lib/tsmetrics"
    type: "DirectoryOrCreate"

  # Memory configuration (when type=memory)
  memory:
    sizeLimit: "512Mi"

# Security and permissions
security:
  # Use initContainer for permission setup (requires privileged access)
  # Only enable if fsGroup is insufficient for your storage type
  useInitContainer: false

  # Alternative: Set securityContext allowPrivilegeEscalation for init
  initContainerPrivileged: false

# Liveness and readiness probes
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Node selection
nodeSelector: {}

tolerations: []

affinity: {}

# Horizontal Pod Autoscaler
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Network Policy Configuration
networkPolicy:
  enabled: true

  # Policy types to enforce
  policyTypes:
    - Ingress
    - Egress

  # Ingress rules
  ingress:
    # Allow monitoring systems
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
        - namespaceSelector:
            matchLabels:
              name: ingress
      ports:
        - protocol: TCP
          port: 9100
    # Allow health checks from any source
    - from: []
      ports:
        - protocol: TCP
          port: 9100

  # Egress rules
  egress:
    # Allow HTTPS/HTTP for API calls
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53

  # Additional labels for NetworkPolicy
  labels: {}

  # Additional annotations for NetworkPolicy
  annotations: {}
